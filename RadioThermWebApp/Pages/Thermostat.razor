@page "/thermostat"
@using CommunityToolkit.Mvvm.Messaging
@using RadioThermLib;
@using RadioThermLib.ViewModels;
@using System.Net.Sockets
@using System.Net
@using CommunityToolkit.Mvvm.DependencyInjection
@using RadioThermLib.Models
@using RadioThermLib.Services

@inject ThermostatWidgetViewModel thermostatViewModel
@inject ISettingsService settingsService

<h3>Thermostat</h3>


@if (thermostatViewModel.Thermostats == null || thermostatViewModel.IsUpdating)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Unit Name</th>
                <th>Temp</th>
                <th>Set Point</th>
                <th>Mode</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ts in thermostatViewModel.Thermostats)
            {
                <tr>
                    <td>@ts.UnitName</td>
                    <td>@ts.State?.Temperature</td>
                    <td>@ts.CurrentSetPoint</td>
                    <td>@ts.State?.ThermostatMode</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="@OnRefreshDevices">Refresh Devices</button>
    <button class="btn btn-primary" @onclick="@ShowPopup"></button>

}

@code {
    private Popup popupRef;

    protected override async Task OnInitializedAsync()
    {
        thermostatViewModel.PropertyChanged += (sender, args) =>
        {
            // the VM uses messaging to start its update. we need to tie in
            // somehow to update the DOM
            StateHasChanged();
        };

        // normally done in WPF land when a control is FrameworkElement.Loaded
        // we set this so that the VM registers for its messages properly.
        thermostatViewModel.IsActive = true;

        SendUpdateRequestMsg();
    }

    private async Task OnRefreshDevices()
    {
        SendUpdateRequestMsg();
    }

    private void SendUpdateRequestMsg()
    {
        var settings = this.settingsService;

        var devices = settings!.GetValue<List<string>>("DiscoveredAddresses");

        foreach (var device in devices!)
        {
            var urm = new UpdateRequestMessage() { SelectedDevice = device };
            var res = WeakReferenceMessenger.Default.Send(urm);
        }
    }

    private void ShowPopup()
    {
        popupRef.Show();
    }

}
