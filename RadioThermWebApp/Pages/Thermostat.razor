@page "/thermostat"

@using CommunityToolkit.Mvvm.Messaging
@using RadioThermLib.ViewModels
@using RadioThermLib.Services


@inject ThermostatWidgetViewModel thermostatViewModel
@inject ISettingsService settingsService
@inject NavigationManager navigationManager


<h3>Thermostat</h3>

@if (HasError)
{
    <p><em>There was an error when updating thermostat states.</em></p>
}

@if (thermostatViewModel.Thermostats == null || thermostatViewModel.IsUpdating)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive-xl">

        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col" class="col-5" >Unit Name</th>
                <th scope="col" class="col-1">Temp</th>
                <th scope="col" class="col-1">Set Point</th>
                <th scope="col" class="col-1">Mode</th>
                <th scope="col" class="col-4">Control</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var ts in thermostatViewModel.Thermostats)
            {
                @if (ts.HasError)
                {
                    <tr><td><em>Error retrieving data!</em></td></tr>
                }
                else
                {
                    <tr>
                        <td>@ts.UnitName</td>
                        <td>@ts.State?.Temperature</td>
                        <td>@ts.CurrentSetPoint</td>
                        <td>@ts.State?.ThermostatMode</td>
                        <td><button class="btn btn-secondary" @onclick="@(e => OnClickCallback(ts))">Control</button></td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>

    <button class="btn btn-primary" @onclick="@OnRefreshDevices">Refresh Devices</button>

}

@code {

    [CascadingParameter]
    protected bool HasError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HasError = false;

        // normally done in WPF land when a control is FrameworkElement.Loaded
        // we set this so that the VM registers for its messages properly.
        thermostatViewModel.IsActive = true;
        // NOTE: we may not need this anymore

        await SendUpdateRequestMsg();
    }

    private async Task OnRefreshDevices()
    {
        await SendUpdateRequestMsg();
    }

    private async Task SendUpdateRequestMsg()
    {
        var settings = this.settingsService;

        await thermostatViewModel.StartUpdateAllCommand.ExecuteAsync(null);
    }

    private void OnClickCallback(ThermostatViewModel? obj)
    {
        if (obj == null)
            return;

        int id = thermostatViewModel.Thermostats.IndexOf(obj);
        navigationManager.NavigateTo($"/details/{id}");
    }
}

